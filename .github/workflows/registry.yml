name: publish

on: [push]

jobs:
  images:
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
            
      - name: Log in to the Container registries
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker login docker.io -u ${{ secrets.DOCKERUSERNAME }} -p ${{ secrets.DOCKERAPIKEY }}

      - name: Build docker image
        run: |
          export DOCKER_CLI_EXPERIMENTAL=enabled
          source .github/workflows/utils.sh
          docker run --privileged --rm docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64
          version="3.12"
          case ${{ matrix.arch }} in
            amd64) : "amd64/alpine" ;;
            arm) : "balenalib/raspberry-pi-alpine" ;;
            arm64) : "arm64v8/alpine" ;;
          esac
          image="$_"
          repo="rjpadilla/alpine-tags:${{ matrix.arch }}"
          myrepo="rjpadilla/alpine"
          date="$(date +%Y%m%d%H%M)"
          amd64_sha=$(get_variant_sha "$image" "$version" "amd64")
          echo $amd64_sha
          variant_amd64_sha=$(get_manifest_sha "$myrepo:latest" "amd64")
          echo $variant_amd64_sha
          # echo "arm"
          # balena_rpi_sha=$(get_tag_sha "balenalib/raspberry-pi-alpine" "$version")
          # echo $balena_rpi_sha
          # variant_rpi_sha=$(get_manifest_sha "$repo:latest" "arm")
          # echo $variant_rpi_sha
          # echo "arm64"
          # alpine_arm64_sha=$(get_variant_sha "alpine" "$version" "arm64")
          # echo $alpine_arm64_sha
          # variant_alpine_arm64_sha=$(get_manifest_sha "$repo:latest" "arm64")
          # echo $variant_alpine_arm64_sha
          docker build -t ghcr.io/$repo --build-arg IMAGE=$image:$version . 
          docker build -t docker.io/$repo --build-arg IMAGE=$image:$version . 
          echo "change"
          flag=$(compare_sha  "$amd64_sha" "$variant_amd64_sha")
          echo $flag
          # docker tag ghcr.io/$repo ghcr.io/$repo-$date
          # docker tag docker.io/$repo docker.io/$repo-$date
          # docker push ghcr.io/$repo
          # docker push docker.io/$repo
          # docker push ghcr.io/$repo-$date
          # docker push docker.io/$repo-$date
          # docker images
  
  # manifests:
  #   needs: images
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       registry: [docker.io, ghcr.io]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Log in to the Container registries
  #       run: |
  #         docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
  #         docker login docker.io -u ${{ secrets.DOCKERUSERNAME }} -p ${{ secrets.DOCKERAPIKEY }}

  #     - name: Deploying manifest to Github Packages
  #       run: |
  #         repo="${{ matrix.registry }}/rjpadilla/alpine"
  #         date="$(date +%Y%m%d%H%M)"
  #         docker manifest create $repo:latest $repo-tags:amd64 $repo-tags:arm $repo-tags:arm64
  #         docker manifest create $repo:$date $repo-tags:amd64 $repo-tags:arm $repo-tags:arm64
  #         docker manifest annotate $repo:latest $repo-tags:arm --os linux --arch arm 
  #         docker manifest annotate $repo:$date $repo-tags:arm --os linux --arch arm 
  #         docker manifest inspect $repo:latest
  #         docker manifest push $repo:latest
  #         docker manifest push $repo:$date