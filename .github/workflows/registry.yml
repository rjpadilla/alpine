name: publish

on: [push]

jobs:
  compare:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
            
      - name: Log in to the Container registries
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker login docker.io -u ${{ secrets.DOCKERUSERNAME }} -p ${{ secrets.DOCKERAPIKEY }}

      - name: Compare images for changes
        id: sha
        run: |
          export DOCKER_CLI_EXPERIMENTAL=enabled
          source .github/workflows/utils.sh
          version="3.12"
          repo="rjpadilla/alpine-tags:${{ matrix.arch }}"
          case ${{ matrix.arch }} in
            amd64) : "amd64/alpine:$version" ;;
            arm) : "balenalib/raspberry-pi-alpine:$version" ;;
            arm64) : "arm64v8/alpine:$version" ;;
          esac
          base="$_"
          docker pull -q $base &>/dev/null
          docker pull -q $repo &>/dev/null
          basesha=$(docker inspect --format='{{index .RepoDigests 0}}' "$base" 2>/dev/null | cut -d @ -f 2)
          echo "base sha is $basesha"
          reposha=$(docker inspect --format='{{index .RepoDigests 0}}' "$repo" 2>/dev/null | cut -d @ -f 2) 
          echo "repo sha is $reposha"
          [[ $basesha = $reposha ]] && echo "::set-output name=flag::false" && echo " no changes" || echo "::set-output name=flag::true" && echo "changes"
          # [[ $basesha = $reposha ]] && echo "no changes" || echo "FLAG=true" >> $GITHUB_ENV; echo "changes"
          # [[ $basesha != $reposha ]] && echo "changes" || echo "no changes"

  images:
    needs: compare
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, arm, arm64]
    steps:
      - name: Log in to the Container registries
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker login docker.io -u ${{ secrets.DOCKERUSERNAME }} -p ${{ secrets.DOCKERAPIKEY }}
          echo ${{ needs.compare.outputs.flag }}
      
      - name: Build docker image
        if: ${{ needs.compare.outputs.flag }}
        run: |
          export DOCKER_CLI_EXPERIMENTAL=enabled
          docker run --privileged --rm docker/binfmt:a7996909642ee92942dcd6cff44b9b95f08dad64
          version="3.12"
          case ${{ matrix.arch }} in
            amd64) : "amd64/alpine:$version" ;;
            arm) : "balenalib/raspberry-pi-alpine:$version" ;;
            arm64) : "arm64v8/alpine:$version" ;;
          esac
          image="$_"
          repo="rjpadilla/alpine-tags:${{ matrix.arch }}"
          date="$(date +%Y%m%d%H%M)"
          docker build -t ghcr.io/$repo --build-arg IMAGE=$image . 
          docker tag ghcr.io/$repo docker.io/$repo
          docker tag ghcr.io/$repo ghcr.io/$repo-$date
          docker tag docker.io/$repo docker.io/$repo-$date
          docker push ghcr.io/$repo
          docker push docker.io/$repo
          docker push ghcr.io/$repo-$date
          docker push docker.io/$repo-$date
          docker images

  manifests:
    needs: images
    strategy:
      fail-fast: false
      matrix:
        registry: [docker.io, ghcr.io]
    runs-on: ubuntu-latest
    steps:
      - name: Log in to the Container registries
        run: |
          docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}
          docker login docker.io -u ${{ secrets.DOCKERUSERNAME }} -p ${{ secrets.DOCKERAPIKEY }}
      - name: Deploying manifest to Github Packages
        if: ${{ needs.compare.outputs.flag }}
        run: |
          repo="${{ matrix.registry }}/rjpadilla/alpine"
          date="$(date +%Y%m%d%H%M)"
          docker manifest create $repo:latest $repo-tags:amd64 $repo-tags:arm $repo-tags:arm64
          docker manifest create $repo:$date $repo-tags:amd64 $repo-tags:arm $repo-tags:arm64
          docker manifest annotate $repo:latest $repo-tags:arm --os linux --arch arm 
          docker manifest annotate $repo:$date $repo-tags:arm --os linux --arch arm 
          docker manifest inspect $repo:latest
          docker manifest push $repo:latest
          docker manifest push $repo:$date